#!/bin/bash

. $libdir/cbdsetup/cbdsetup.functions

usage () {
    cat <<-EOF
	Usage: cbddisks_stop [-f] CBD [CBD]...   stop one or more CloudBD disks
	       cbddisks_stop -a [-f]             stop all CloudBD disks

	       CBD := remote:disk                an active CloudBD disk

	Stop CloudBD disks utility
	-a, --all                     stop all disks
	-f, --force                   force a disk closed even if in use (*WARN: see below)
	-h, --help                    display this help and exit

	* Warning: forcing an active disk to stop will attempt to unmount
	           filesystems, deactivate lvm logical volumes, close crypto disks,
	           and stop partitions that are using this CBD disk. 
	EOF
}

main () {
    local cbds="" param all

    for param in "\$@"; do
        case "\$param" in
        -h|-help|--help)
            usage
            exit 0
            ;;
        -a|-all|--all)
            all="yes"
            ;;
        -f|-force|--force)
            FORCE_STOP="yes"
            ;;
        -*)
            >&2 echo "\$0: error - invalid option -- '\$param'"
            >&2 echo "Try '\$0 --help' for more info"
            exit 1
            ;;
        *)
            cbds="\$cbds \$param"
            ;;
        esac
    done

    if [ "x\$all" = "xyes" ] && [ "x\$cbds" != "x" ]; then
        >&2 echo "\$0: error - all disks option specified, no CBD disk arguments expected"
        >&2 echo "Try '\$0 --help' for more info"
        exit 1
    elif [ "x\$all" != "xyes" ] && [ "x\$cbds" = "x" ]; then
        >&2 echo "\$0: error - no disks specified"
        >&2 echo "Try '\$0 --help' for more info"
        exit 1
    fi

    if [ "\$(id -u)" -ne "0" ]; then
        >&2 echo "\$0: error - must be run as root"
        exit 1
    fi

    if [ "x\$IS_SYSTEMD" = "xyes" ]; then
        if [ "x\$all" = "xyes" ]; then
            log_action_msg "Stopping CloudBD disks"

            local disk status overall=0
            for disk in \$(ls /var/run/cloudbd/*:0.socket 2>/dev/null); do
                disk="\${disk##*/}"
                disk="\${disk%":0.socket"}"

                if ! systemctl status "cbdsetup@\${disk}.service" >/dev/null 2>&1; then
                    log_action_cont_msg "Stopping \$disk (already stopped)"
                    log_action_end_msg 0
                    continue
                fi

                if [ "x\$FORCE_STOP" = "x" ] || [ "x\$FORCE_STOP" = "xno" ] && ! check_not_busy "\${disk}"; then
                    log_action_cont_msg "Stopping \$disk (device busy)"
                    log_action_end_msg 1
                    overall=1
                    continue
                fi

                systemctl stop "cbdsetup@\${disk}.service" 2>/dev/null
                status=\$?
                log_action_cont_msg "\$(systemctl status -o cat "cbdsetup@\${disk}.service" | grep -m1 "Stopping \${disk}.*")"
                if [ "\$status" -ne "0" ]; then
                    log_action_end_msg 1
                    overall=1
                else
                    log_action_end_msg 0
                fi
            done
            log_action_cont_msg "CloudBD disks stopped"
            log_action_end_msg \$overall
            exit \$overall
        else
            local overall=0
            for cbd in \$cbds; do
                local status

                if ! systemctl status "cbdsetup@\${cbd}.service" >/dev/null 2>&1; then
                    log_action_cont_msg "Stopping \$cbd (already stopped)"
                    log_action_end_msg 0
                    continue
                fi

                if ! check_not_busy "\${cbd}"; then
                    log_action_cont_msg "Stopping \$cbd (device busy)"
                    log_action_end_msg 1
                    overall=1
                    continue
                fi

                systemctl stop "cbdsetup@\${cbd}.service" 2>/dev/null
                status=\$?
                log_action_cont_msg "\$(systemctl status -o cat "cbdsetup@\${cbd}.service" | grep -m1 "Stopping \${cbd}.*")"
                if [ "\$status" -ne "0" ]; then
                    log_action_end_msg 1
                    overall=1
                else
                    log_action_end_msg 0
                fi
            done
            exit $overall
        fi
    else
        do_stop \$cbds
        exit \$?
    fi
}

main "\$@"

