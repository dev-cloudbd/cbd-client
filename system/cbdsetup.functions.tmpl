# Copyright 2018 CloudBD, LLC
# This file is for inclusion with
#    . $libdir/cbdsetup/cbddisks.functions
# and should not be executed directly.

# debug output
# set -x

PATH="/sbin:/bin:/usr/sbin:/usr/bin"
RUNSTATE_D="$runstatedir/cloudbd"
SYSCONF_D="$sysconfdir/cloudbd"

CBDDISKS_CONF=\${CBDDISKS_CONF-"\$SYSCONF_D/cbddisks.conf"}
[ -r "\$CBDDISKS_CONF" ] && . "\$CBDDISKS_CONF"

TABFILE="\${CBDDISKS_TAB-"\$SYSCONF_D/cbdtab"}"
CBDDISKS_ENABLE="\${CBDDISKS_ENABLE-"yes"}"
CBDDISKS_USER="\${CBDDISKS_USER-"cloudbd"}"
CBDDISKS_GROUP="\${CBDDISKS_GROUP-"cloudbd"}"
CBDDISKS_OP_TIMEOUT="\${CBDDISKS_OP_TIMEOUT-"180"}"

CBDDISKS_START_TIMEOUT="\${CBDDISKS_START_TIMEOUT-"30"}"
CBDDISKS_STOP_TIMEOUT="\${CBDDISKS_STOP_TIMEOUT-"10"}"

# Check for systemd
if readlink -f /sbin/init | grep -qE "systemd"; then
    IS_SYSTEMD="yes"
fi

# Sanity check
[ -x $sbindir/cbdkit ] || exit 0
[ -x $sbindir/cbd-client ] || exit 0
[ -x $bindir/cloudbd ] || exit 0

# Parse and validate cbd value from socket path
# input:   \$1 cbd socket file path 
# output:  \$CBD regex checked remote:disk string
#          \$ERRMSG set to reason for failure if returning an error
# return:  0 on success
#          1 on errors
# int get_cbd_from_socket (string socket_path)
get_cbd_from_socket () {
    local sock_f="\${1##*/}"
    parse_cbd "\${sock_f%%.socket}" || return 1
    return 0
}

# Parse and validate cbd value
# input:   \$1 unchecked cbd string
# output:  \$CBD regex checked remote:disk string
#          \$ERRMSG set to reason for failure if returning an error
# return:  0 on success
#          1 on errors
# int parse_cbd (string cbd);
parse_cbd () {
    ERRMSG=""

    if ! expr "x\$1" : "x[[:alnum:]_-]\+:[[:alnum:]_-]\+\$" >/dev/null; then
        ERRMSG="bad value for cbd"
        return 1
    fi

    CBD="\$1"
    return 0
}

# Parse and validate nbd value
# input:   \$1 unchecked nbd string
# output:  \$NBD regex checked nbd[[:digit:]]+ string
#          \$ERRMSG set to reason for failure if returning an error
# return:  0 on success
#          1 on errors
# int parse_nbd (string nbd);
parse_nbd () {
    # Strip /dev/
    local nbd="\${1##/dev/}"
    ERRMSG=""

    if ! expr "x\$nbd" : "xnbd[[:digit:]]\+\$" >/dev/null; then
        ERRMSG="bad value for nbd"
        return 1
    fi

    NBD="\$nbd"
    return 0
}

# Parse and validate cbdtab options
# input:   \$1: comma separated list of cbdtab options, 3rd field of cbdtab
# output:  \$CBDKIT_PARAMS space separated cbdkit cmd line parameters
#          \$IGNORE set to yes if noauto is in the options
#          \$ERRMSG set to reason for failure if returning an error
# return:  0 on success
#          1 on errors
# int parse_opts (string opts);
parse_opts () {
    local opts="\$1" opt param value
    local IFS

    CBDKIT_PARAMS=""
    ERRMSG=""

    # Parse the options field and validate cbdkit parameters
    IFS=','
    for opt in \$opts; do
        param=\$(echo "\$opt" | sed 's/=.*//')
        value=\$(echo "\$opt" | sed '/=/!d;s/^.*=//')

        case "\$param" in
        connections|threads|block_buffers|cache_buffers|block_timeout|swath_buffers|swath_timeout)
            if [ -z "\$value" ]; then
                ERRMSG="no value for option \$param"
                return 1
            elif ! expr "x\$value" : 'x[[:digit:]]\+\$' >/dev/null; then
                ERRMSG="bad value for option \$param"
                return 1
            elif [ "\$value" -le 0 ]; then
                ERRMSG="option \$param must be greater than 0"
                return 1
            fi
            CBDKIT_PARAMS="\$CBDKIT_PARAMS \$param=\$value"
            ;;
        loglevel|blocks_loglevel|swaths_loglevel|rest_loglevel|ops_loglevel|socket_loglevel|auth_loglevel)
            if [ -z "\$value" ]; then
                ERRMSG="no value for option \$param"
                return 1
            fi
            case "\$value" in
            CRITICAL|ERROR|WARNING|NOTICE|INFO|DEBUG|TRACE1|TRACE2|TRACE3|TRACE4|TRACE5|TRACE6|TRACE7|TRACE8|TRACE9|TRACE10)
                ;;
            critical|error|warning|notice|info|debug|trace1|trace2|trace3|trace4|trace5|trace6|trace7|trace8|trace9|trace10)
                ;;
            *)
                ERRMSG="bad value for option \$param"
                return 1
                ;;
            esac
            CBDKIT_PARAMS="\$CBDKIT_PARAMS \$param=\$value"
            ;;
        noauto)
            IGNORE="yes"
            ;;
        *)
            ERRMSG="unrecognized option \$param"
            return 1
            ;;
        esac
    done
    return 0
}

# Read the cbdtab line for a device and validate all fields
# input:   \$1 unchecked cbd string
# output:  \$CBD regex checked remote:disk string
#          \$ERRMSG set to reason for failure if returning an error
# return:  0 on success
#          1 on errors
# int get_cbdtab_line_by_cbd (string cbd)
get_cbdtab_line_by_cbd () {
    # ERRMSG set by parse_cbd
    parse_cbd "\$1" || return 1

    local line="\$(grep -E -m1 "^[[:blank:]]*nbd[[:digit:]]+[[:blank:]]+\$CBD[[:blank:]#\$]" "\$TABFILE" | sed 's/[[:blank:]]*#.*\$//')"

    # Return 1 if CBD not found in TABFILE
    if [ -z "\$line" ]; then
        ERRMSG="not found"
        return 1
    fi

    # Split the line into the 3 fields
    read -r NBD CBD OPTS <<-EOF
	\$line
	EOF

    return 0
}

# int handle_start (string nbd, string cbd [, string opts])
# ret 0: success
#     1: error
#     2: ignored
#     3: already running
handle_start () {
    # Validate inputs
    # ERRMSG set by parse funcs
    parse_nbd "\$1" && parse_cbd "\$2" && parse_opts "\$3" || return 1

    # Ignore noauto devices
    if [ "x\$IGNORE" = "xyes" ] && [ "x\$FORCE_START" = "x" -o "x\$FORCE_START" = "xno" ]; then
        ERRMSG="noauto"
        return 2
    fi

    # Skip devices already active
    if dmsetup info "\$CBD" >/dev/null 2>&1; then
        if cbd-client -l "\$CBD" >/dev/null 2>&1; then
            ERRMSG="already running"
            return 3
        else
            ERRMSG="device mapper busy"
            return 1
        fi
    fi

    local PIDFILE="\$RUNSTATE_D/\${CBD}.pid"
    if ! cbd-client -l "\$CBD" >/dev/null 2>&1; then
        # Start the device server
        # Make sure NBD device exists
        if [ ! -b "/dev/\$NBD" ]; then
            ERRMSG="/dev/\$NBD does not exist"
            return 1
        fi

        # Make sure NBD device is not busy
        if cbd-client -c "/dev/\$NBD" >/dev/null 2>&1; then
            ERRMSG="/dev/\$NBD is busy"
            return 1
        fi

        # Make sure NBD device is writable
        if [ ! -w "/dev/\$NBD" ]; then
            ERRMSG="/dev/\$NBD permission denied"
            return 1
        fi

        local SOCKET="\$RUNSTATE_D/\${CBD}.socket"
        local UDEV="\$RUNSTATE_D/\${NBD}.udev"
        local STOPPING="\$RUNSTATE_D/\${NBD}.stopping"

        # Clean out any previous driver run files
        rm -f "\$SOCKET" "\$PIDFILE" "\$UDEV" "\$STOPPING"

        # Generate udev parameters
        if ! /bin/cloudbd info -e "\$CBD" > "\$UDEV"; then
            ERRMSG="unable to contact remote disk"
            return 1
        fi

        # Start the server
        local CLIENT_CMD="$sbindir/cbd-client -t \$CBDDISKS_OP_TIMEOUT -f \$CBD /dev/\$NBD"
        local SERVER_CMD="$sbindir/cbdkit -e \$NBD --pidfile=\$PIDFILE -u \$CBDDISKS_USER -g \$CBDDISKS_GROUP -U \$SOCKET cloudbd device=\$CBD \$CBDKIT_PARAMS"
        if ! \$SERVER_CMD --run "\$CLIENT_CMD"; then
            ERRMSG="cbdkit returned with error"
            return 1
        fi
    else
        # Server is already active, kick udev to get device mapper started
        udevadm trigger "/dev/\$NBD"
    fi

    local PID="\$(cat \$PIDFILE 2>/dev/null)"
    if [ -z "\$PID" ]; then
        ERRMSG="unable to read server pid"
        return 1
    fi

    # Wait for udev and device mapper to pick up the new block device
    local timeout=0
    while [ \$timeout -lt \$CBDDISKS_START_TIMEOUT ]; do
        # Return success if device mapper picks up \$CBD
        dmsetup info "\$CBD" >/dev/null 2>&1 && return 0

        # Check that server is still running        
        if ! ps "\$PID" >/dev/null 2>&1; then
            ERRMSG="server exited unexpectedly"
            return 1
        fi

        timeout=\$(( timeout + 1 ))
        sleep 1
    done

    ERRMSG="timed out"
    return 1
}

# int do_start ([string cbd]*)
do_start () {
    local ret=0

    # Ensure necessary modules are loaded
    modprobe -qb dm-mod || true
    modprobe -qb nbd || true

    # Create the runstate directory if missing
    [ -d "\$RUNSTATE_D" ] || mkdir -p -m 770 "\$RUNSTATE_D"

    # Start all configured disks if no parameters passed
    if [ "\$#" -eq 0 ]; then
        log_action_begin_msg "Starting CloudBD disks"

        local nbd cbd opts
        # filter empty lines, comment lines, and end-of-line comments
        while read nbd cbd opts; do
            if [ "x\$cbd" = "x" ]; then continue; fi
            handle_start "\$nbd" "\$cbd" "\$opts"
            case \$? in
                0) log_action_cont_msg "Starting \$CBD (started)"
                   log_action_end_msg 0
                   ;;
                1) log_action_cont_msg "Starting \$CBD (\$ERRMSG)"
                   log_action_end_msg 1
                   ret=1
                   ;;
                2) log_action_cont_msg "Skipping \$CBD (\$ERRMSG)"
                   log_action_end_msg 0
                   ;;
                3) log_action_cont_msg "Starting \$CBD (\$ERRMSG)"
                   log_action_end_msg 0
                   ;;
                *) log_action_cont_msg "Starting \$CBD (unexpected return value \$?)"
                   log_action_end_msg 1
                   ret=1
                   ;;
            esac
        done <<- EOF
	\$(grep -vE "^[[:blank:]]*(#|\$)" "\$TABFILE" | sed 's/ *#.*\$//g')
	EOF

        log_action_cont_msg "CloudBD disks started"
        log_action_end_msg \$ret
    else
        local cbd
        for cbd in "\$@"; do
            if ! get_cbdtab_line_by_cbd "\$cbd"; then
                log_failure_msg "\$cbd (not found)"
                ret=1
                continue
            fi

            handle_start "\$NBD" "\$CBD" "\$OPTS"
            case \$? in
                0) log_success_msg "Starting \$CBD (started)"
                   ;;
                1) log_failure_msg "Starting \$CBD (\$ERRMSG)"
                   ret=1
                   ;;
                2) log_success_msg "Skipping \$CBD (\$ERRMSG)"
                   ;;
                3) log_success_msg "Starting \$CBD (\$ERRMSG)"
                   ;;
                *) log_failure_msg "Starting \$CBD (unexpected return value \$?)"
                   ret=1
                   ;;
            esac
        done
    fi

    return \$ret
}

#int handle_stop (string cbd)
handle_stop () {
    # Validate input
    parse_cbd "\$1" || return 1 # ERRMSG set by parse func

    local dmname="\$(dmsetup info -c --noheadings -o blkdevname \$CBD 2>/dev/null)"

    # Check for a busy device_mapper disk and FORCE_STOP option
    if [ -n "\$dmname" ] && [ "x\$FORCE_STOP" = "x" -o "x\$FORCE_STOP" = "xno" ]; then
        opencount="\$(dmsetup info -c --noheadings -o open "\$CBD" 2>/dev/null)"
        if [ -z "\$opencount" ]; then
            ERRMSG="unable to query opencount"
            return 1
        elif [ "\$opencount" -ne 0 ]; then
            ERRMSG="device busy"
            return 1
        fi
    fi

    # Check if device is running
    local nbd="\$(cbd-client -l "\$CBD" 2>/dev/null | grep -Eo '^nbd[[:digit:]]+\$')"

    if [ -n "\$nbd" ] && parse_nbd "\$nbd"; then
        # Prevent udev from starting this device
        touch "\$RUNSTATE_D/\${NBD}.stopping"
    else
        nbd=""
    fi

    # Stop all services using device cleanly before yanking the plug
    local timeout=0
    while dmsetup info "\$CBD" >/dev/null 2>&1 && [ \$timeout -lt \$CBDDISKS_STOP_TIMEOUT ]; do
        local kname type mnt
        lsblk -l --noheadings -o KNAME,TYPE "/dev/\$dmname" 2>/dev/null | tac | while read kname type; do
            mnt="\$(findmnt -n -oTARGET "/dev/\$kname" 2>/dev/null)"
            if [ ! -z "\$mnt" ]; then
                [ "\$IS_SYSTEMD" = "yes" ] && systemctl stop "\$(systemd-escape "\${mnt##/}" 2>/dev/null).mount" >/dev/null 2>&1 ||
                        umount -f "\$mnt" >/dev/null 2>&1 || break
            fi

            if [ "\$type" = "lvm" ]; then
                local lvmname="\$(cat /sys/block/"\$kname"/dm/name)"
                local lvname="\$(dmsetup splitname --noheadings "\$lvmname" -c -o lv_name 2>/dev/null)"
                local vgname="\$(dmsetup splitname --noheadings "\$lvmname" -c -o vg_name 2>/dev/null)"
                if [ ! -z "\$lvname" ] && [ ! -z "\$vgname" ]; then
                    lvchange -an "\$vgname/\$lvname" >/dev/null 2>&1 || true
                fi
            elif [ "\$type" = "crypt" ]; then
                local cname="\$(cat /sys/block/"\$kname"/dm/name)"
                if [ -z "\$IS_SYSTEMD" ] || ! systemctl stop "systemd-cryptsetup@\${cname}.service" >/dev/null 2>&1; then
                    cryptdisks_stop "\$cname" >/dev/null 2>&1 || cryptsetup close "\$cname" >/dev/null 2>&1 || true
                fi
            elif [ "\$type" = "part" ]; then
                local pname="\$(cat /sys/block/"\$kname"/dm/name)"
                dmsetup remove --retry "\$pname" >/dev/null 2>&1 || true
            elif [ "\$type" = "cbd" ]; then
                dmsetup remove --retry "\$CBD" >/dev/null 2>&1 || true
            fi
        done
        sleep 1
        timeout=\$(( timeout + 1 ))
    done

    # Disconnect cloudbd from nbd
    if [ -n "\$nbd" ]; then
        local pid="\$(pgrep -F "\$RUNSTATE_D/\${CBD}.pid" 2>/dev/null)"
        cbd-client -d "/dev/\$NBD" >/dev/null 2>&1 || true

        if [ -z "\$pid" ]; then
            while cbd-client -l "\$CBD" >/dev/null 2>&1 && [ \$timeout -lt \$CBDDISKS_STOP_TIMEOUT ]; do
                sleep 1
                timeout=\$(( timeout + 1))
            done

            if cbd-client -l "\$CBD" >/dev/null 2>&1; then
                ERRMSG="failed to stop server"
                ret=1
            fi
        else
            cbd-client -d "/dev/\$NBD" >/dev/null 2>&1 || true

            while ps "\$pid" >/dev/null 2>&1 ] && [ \$timeout -lt \$CBDDISKS_STOP_TIMEOUT ]; do
                sleep 1
                timeout=\$(( timeout + 1 ))
            done

            if ps "\$pid" >/dev/null 2>&1; then
                ERRMSG="failed to stop server"
                ret=1
            fi
        fi

        # Kick udev
        udevadm trigger "/dev/\$NBD"

        [ "\$ret" -eq 0 ] && rm -f "\$RUNSTATE_D/\${NBD}.udev" "\$RUNSTATE_D/\${NBD}.stopping" || true
    fi

    if [ "\$ret" -eq 0 ] && dmsetup info "\$CBD" >/dev/null 2>&1; then
        ret=1
        ERRMSG="failed to stop device mapper"
    else
        rm -f "\$RUNSTATE_D/\${CBD}.socket" "\$RUNSTATE_D/\${CBD}.pid"
    fi

    return \$ret
}

#int do_stop ([string cbd]*)
do_stop () {
    local ret=0

    [ -d "\$RUNSTATE_D" ] || return 0

    if [ "\$#" -eq 0 ]; then
        log_action_begin_msg "Stopping CloudBD disks"
        local socket
        for socket in \$(ls \$RUNSTATE_D/*.socket 2>/dev/null); do
            get_cbd_from_socket "\$socket" || continue
            handle_stop "\$CBD"
            case \$? in
                0) log_action_cont_msg "Stopping \$CBD (stopped)"
                   log_action_end_msg 0
                   ;;
                1) log_action_cont_msg "Stopping \$CBD (\$ERRMSG)"
                   log_action_end_msg 1
                   ret=1
                   ;;
                2) log_action_cont_msg "Stopping \$CBD (\$ERRMSG)"
                   log_action_end_msg 0
                   ;;
                *) log_action_cont_msg "Stopping \$CBD (unexpected return value \$?)"
                   log_action_end_msg 1
                   ret=1
                   ;;
            esac
        done
        log_action_cont_msg "CloudBD disks stopped"
        log_action_end_msg \$ret
    else
        local cbd
        for cbd in "\$@"; do
            if ! parse_cbd "\$cbd"; then
                log_failure_msg "Stopping \$cbd (\$ERRMSG)"
                ret=1
                continue
            fi

            handle_stop "\$CBD"
            case \$? in
                0) log_success_msg "Stopping \$CBD (stopped)"
                   ;;
                1) log_failure_msg "Stopping \$CBD (\$ERRMSG)"
                   ret=1
                   ;;
                2) log_success_msg "Stopping \$CBD (\$ERRMSG)"
                   ;;
                *) log_failure_msg "Stopping \$CBD (unexpected return value \$?)"
                   ret=1
                   ;;
            esac
        done
    fi

    # hack for systemd bug not deleting all virtual disk paths
    [ -z "\$IS_SYSTEMD" ] || systemctl daemon-reload || true

    return \$ret
}

# logging from /lib/lsb/init-functions and /lib/lsb/init-functions.d/50-ubuntu-logging
# for compatibility with rhel systems

LOG_DAEMON_MSG=""

log_use_plymouth () {
    if [ "\${loop:-n}" = y ]; then
        return 1
    fi
    plymouth --ping >/dev/null 2>&1
}

log_use_fancy_output () {
    TPUT=/usr/bin/tput
    EXPR=/usr/bin/expr
    if  [ -t 1 ] &&
        [ "x\${TERM:-}" != "x" ] &&
        [ "x\${TERM:-}" != "xdumb" ] &&
        [ -x \$TPUT ] && [ -x \$EXPR ] &&
        \$TPUT hpa 60 >/dev/null 2>&1 &&
        \$TPUT setaf 1 >/dev/null 2>&1
    then
        [ -z \$FANCYTTY ] && FANCYTTY=1 || true
    else
        FANCYTTY=0
    fi
    case "\$FANCYTTY" in
        1|Y|yes|true)   true;;
        *)              false;;
    esac
}

log_begin_msg () {
    log_daemon_msg "\$1"
}

log_end_msg () {
    if [ -z "\$1" ]; then
        return 1
    fi

    if [ "\$COL" ] && [ -x "\$TPUT" ]; then
        # If plymouth is running, print previously stored output
        # to avoid buffering problems (LP: #752393)
        if log_use_plymouth; then
            if [ -n "\$LOG_DAEMON_MSG" ]; then
                log_daemon_msg \$LOG_DAEMON_MSG
                LOG_DAEMON_MSG=""
            fi
        fi

        printf "\r" || true
        \$TPUT hpa \$COL
        if [ "\$1" -eq 0 ]; then
            echo "[ OK ]" || true
        else
            printf '[' || true
            \$TPUT setaf 1 || true # red
            printf fail || true
            \$TPUT op || true # normal
            echo ']' || true
        fi
    else
        if [ "\$1" -eq 0 ]; then
            echo "   ...done." || true
        else
            echo "   ...fail!" || true
        fi
    fi
    return \$1
}

log_action_msg () {
    echo " * \$@" || true
}

log_action_begin_msg () {
    log_daemon_msg "\$@..." || true
}

log_action_cont_msg () {
    log_daemon_msg "\$@..." || true
}

log_action_end_msg () {
    # In the future this may do something with \$2 as well.
    log_end_msg "\$1" || true
}

log_daemon_msg () {
    if [ -z "\$1" ]; then
        return 1
    fi

    if log_use_fancy_output && \$TPUT xenl >/dev/null 2>&1; then
        COLS=\`\$TPUT cols\`
        if [ "\$COLS" ] && [ "\$COLS" -gt 6 ]; then
            COL=\`\$EXPR \$COLS - 7\`
        else
            COLS=80
            COL=73
        fi

        if log_use_plymouth; then
            # If plymouth is running, don't output anything at this time
            # to avoid buffering problems (LP: #752393)
            if [ -z "\$LOG_DAEMON_MSG" ]; then
                LOG_DAEMON_MSG=\$*
                return
            fi
        fi

        # We leave the cursor \`hanging' about-to-wrap (see terminfo(5)
        # xenl, which is approximately right). That way if the script
        # prints anything then we will be on the next line and not
        # overwrite part of the message.

        # Previous versions of this code attempted to colour-code the
        # asterisk but this can't be done reliably because in practice
        # init scripts sometimes print messages even when they succeed
        # and we won't be able to reliably know where the colourful
        # asterisk ought to go.

        printf " * \$*       " || true
        # Enough trailing spaces for \` [fail]' to fit in; if the message
        # is too long it wraps here rather than later, which is what we
        # want.
        \$TPUT hpa \`\$EXPR \$COLS - 1\` || true
        printf ' ' || true
    else
        echo " * \$@" || true
        COL=
    fi
}

log_success_msg () {
    if [ -z \$IS_SYSTEMD ]; then
        echo " * \$@"
    else
        echo "\$@"
    fi
}

log_failure_msg () {
    if log_use_fancy_output; then
        RED=\`\$TPUT setaf 1\`
        NORMAL=\`\$TPUT op\`
        if [ -z \$IS_SYSTEMD ]; then
            echo " \$RED*\$NORMAL \$@"
        else
            echo "\$RED\$@\$NORMAL"
        fi
    else
        if [ -z \$IS_SYSTEMD ]; then
           echo " * \$@"
        else
           echo "\$@"
        fi
     fi
}

log_warning_msg () {
    if log_use_fancy_output; then
        YELLOW=\`\$TPUT setaf 3\`
        NORMAL=\`\$TPUT op\`
        echo " \$YELLOW*\$NORMAL \$@" || true
    else
        echo " * \$@" || true
    fi
}

